// Generated by gencpp from file stmotion_controller/lego_pickupRequest.msg
// DO NOT EDIT!


#ifndef STMOTION_CONTROLLER_MESSAGE_LEGO_PICKUPREQUEST_H
#define STMOTION_CONTROLLER_MESSAGE_LEGO_PICKUPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stmotion_controller
{
template <class ContainerAllocator>
struct lego_pickupRequest_
{
  typedef lego_pickupRequest_<ContainerAllocator> Type;

  lego_pickupRequest_()
    : reference_frame()
    , is_pick()
    , pick_lego_name()  {
    }
  lego_pickupRequest_(const ContainerAllocator& _alloc)
    : reference_frame(_alloc)
    , is_pick(_alloc)
    , pick_lego_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reference_frame_type;
  _reference_frame_type reference_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _is_pick_type;
  _is_pick_type is_pick;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _pick_lego_name_type;
  _pick_lego_name_type pick_lego_name;





  typedef boost::shared_ptr< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> const> ConstPtr;

}; // struct lego_pickupRequest_

typedef ::stmotion_controller::lego_pickupRequest_<std::allocator<void> > lego_pickupRequest;

typedef boost::shared_ptr< ::stmotion_controller::lego_pickupRequest > lego_pickupRequestPtr;
typedef boost::shared_ptr< ::stmotion_controller::lego_pickupRequest const> lego_pickupRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator1> & lhs, const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator2> & rhs)
{
  return lhs.reference_frame == rhs.reference_frame &&
    lhs.is_pick == rhs.is_pick &&
    lhs.pick_lego_name == rhs.pick_lego_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator1> & lhs, const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stmotion_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3932247b94dffeeb281fcf442c51f24e";
  }

  static const char* value(const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3932247b94dffeebULL;
  static const uint64_t static_value2 = 0x281fcf442c51f24eULL;
};

template<class ContainerAllocator>
struct DataType< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stmotion_controller/lego_pickupRequest";
  }

  static const char* value(const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string reference_frame\n"
"string is_pick\n"
"string pick_lego_name\n"
;
  }

  static const char* value(const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reference_frame);
      stream.next(m.is_pick);
      stream.next(m.pick_lego_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lego_pickupRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stmotion_controller::lego_pickupRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stmotion_controller::lego_pickupRequest_<ContainerAllocator>& v)
  {
    s << indent << "reference_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reference_frame);
    s << indent << "is_pick: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.is_pick);
    s << indent << "pick_lego_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.pick_lego_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STMOTION_CONTROLLER_MESSAGE_LEGO_PICKUPREQUEST_H
